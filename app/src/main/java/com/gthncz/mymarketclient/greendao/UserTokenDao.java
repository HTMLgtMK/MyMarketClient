package com.gthncz.mymarketclient.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TOKEN".
*/
public class UserTokenDao extends AbstractDao<UserToken, Long> {

    public static final String TABLENAME = "USER_TOKEN";

    /**
     * Properties of entity UserToken.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property Expire_time = new Property(2, int.class, "expire_time", false, "EXPIRE_TIME");
        public final static Property Create_time = new Property(3, int.class, "create_time", false, "CREATE_TIME");
        public final static Property Token = new Property(4, String.class, "token", false, "TOKEN");
        public final static Property Device_type = new Property(5, String.class, "device_type", false, "DEVICE_TYPE");
    }


    public UserTokenDao(DaoConfig config) {
        super(config);
    }
    
    public UserTokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TOKEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: user_id
                "\"EXPIRE_TIME\" INTEGER NOT NULL ," + // 2: expire_time
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: create_time
                "\"TOKEN\" TEXT NOT NULL ," + // 4: token
                "\"DEVICE_TYPE\" TEXT NOT NULL );"); // 5: device_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserToken entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getExpire_time());
        stmt.bindLong(4, entity.getCreate_time());
        stmt.bindString(5, entity.getToken());
        stmt.bindString(6, entity.getDevice_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserToken entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getExpire_time());
        stmt.bindLong(4, entity.getCreate_time());
        stmt.bindString(5, entity.getToken());
        stmt.bindString(6, entity.getDevice_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserToken readEntity(Cursor cursor, int offset) {
        UserToken entity = new UserToken( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // user_id
            cursor.getInt(offset + 2), // expire_time
            cursor.getInt(offset + 3), // create_time
            cursor.getString(offset + 4), // token
            cursor.getString(offset + 5) // device_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserToken entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setExpire_time(cursor.getInt(offset + 2));
        entity.setCreate_time(cursor.getInt(offset + 3));
        entity.setToken(cursor.getString(offset + 4));
        entity.setDevice_type(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserToken entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserToken entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserToken entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
