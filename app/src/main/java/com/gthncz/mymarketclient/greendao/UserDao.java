package com.gthncz.mymarketclient.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property User_pass = new Property(3, String.class, "user_pass", false, "USER_PASS");
        public final static Property User_status = new Property(4, int.class, "user_status", false, "USER_STATUS");
        public final static Property User_login = new Property(5, String.class, "user_login", false, "USER_LOGIN");
        public final static Property User_email = new Property(6, String.class, "user_email", false, "USER_EMAIL");
        public final static Property Last_login_ip = new Property(7, String.class, "last_login_ip", false, "LAST_LOGIN_IP");
        public final static Property Last_login_time = new Property(8, int.class, "last_login_time", false, "LAST_LOGIN_TIME");
        public final static Property User_activation_key = new Property(9, String.class, "user_activation_key", false, "USER_ACTIVATION_KEY");
        public final static Property Create_time = new Property(10, int.class, "create_time", false, "CREATE_TIME");
        public final static Property Point = new Property(11, int.class, "point", false, "POINT");
        public final static Property Balance = new Property(12, int.class, "balance", false, "BALANCE");
        public final static Property User_nickname = new Property(13, String.class, "user_nickname", false, "USER_NICKNAME");
        public final static Property Avatar = new Property(14, String.class, "avatar", false, "AVATAR");
        public final static Property Sex = new Property(15, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(16, int.class, "birthday", false, "BIRTHDAY");
        public final static Property User_level = new Property(17, long.class, "user_level", false, "USER_LEVEL");
        public final static Property More = new Property(18, String.class, "more", false, "MORE");
    }

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"MOBILE\" TEXT UNIQUE ," + // 2: mobile
                "\"USER_PASS\" TEXT NOT NULL ," + // 3: user_pass
                "\"USER_STATUS\" INTEGER NOT NULL ," + // 4: user_status
                "\"USER_LOGIN\" TEXT UNIQUE ," + // 5: user_login
                "\"USER_EMAIL\" TEXT UNIQUE ," + // 6: user_email
                "\"LAST_LOGIN_IP\" TEXT NOT NULL ," + // 7: last_login_ip
                "\"LAST_LOGIN_TIME\" INTEGER NOT NULL ," + // 8: last_login_time
                "\"USER_ACTIVATION_KEY\" TEXT NOT NULL ," + // 9: user_activation_key
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: create_time
                "\"POINT\" INTEGER NOT NULL ," + // 11: point
                "\"BALANCE\" INTEGER NOT NULL ," + // 12: balance
                "\"USER_NICKNAME\" TEXT," + // 13: user_nickname
                "\"AVATAR\" TEXT NOT NULL ," + // 14: avatar
                "\"SEX\" INTEGER NOT NULL ," + // 15: sex
                "\"BIRTHDAY\" INTEGER NOT NULL ," + // 16: birthday
                "\"USER_LEVEL\" INTEGER NOT NULL ," + // 17: user_level
                "\"MORE\" TEXT);"); // 18: more
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
        stmt.bindString(4, entity.getUser_pass());
        stmt.bindLong(5, entity.getUser_status());
 
        String user_login = entity.getUser_login();
        if (user_login != null) {
            stmt.bindString(6, user_login);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(7, user_email);
        }
        stmt.bindString(8, entity.getLast_login_ip());
        stmt.bindLong(9, entity.getLast_login_time());
        stmt.bindString(10, entity.getUser_activation_key());
        stmt.bindLong(11, entity.getCreate_time());
        stmt.bindLong(12, entity.getPoint());
        stmt.bindLong(13, entity.getBalance());
 
        String user_nickname = entity.getUser_nickname();
        if (user_nickname != null) {
            stmt.bindString(14, user_nickname);
        }
        stmt.bindString(15, entity.getAvatar());
        stmt.bindLong(16, entity.getSex());
        stmt.bindLong(17, entity.getBirthday());
        stmt.bindLong(18, entity.getUser_level());
 
        String more = entity.getMore();
        if (more != null) {
            stmt.bindString(19, more);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
        stmt.bindString(4, entity.getUser_pass());
        stmt.bindLong(5, entity.getUser_status());
 
        String user_login = entity.getUser_login();
        if (user_login != null) {
            stmt.bindString(6, user_login);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(7, user_email);
        }
        stmt.bindString(8, entity.getLast_login_ip());
        stmt.bindLong(9, entity.getLast_login_time());
        stmt.bindString(10, entity.getUser_activation_key());
        stmt.bindLong(11, entity.getCreate_time());
        stmt.bindLong(12, entity.getPoint());
        stmt.bindLong(13, entity.getBalance());
 
        String user_nickname = entity.getUser_nickname();
        if (user_nickname != null) {
            stmt.bindString(14, user_nickname);
        }
        stmt.bindString(15, entity.getAvatar());
        stmt.bindLong(16, entity.getSex());
        stmt.bindLong(17, entity.getBirthday());
        stmt.bindLong(18, entity.getUser_level());
 
        String more = entity.getMore();
        if (more != null) {
            stmt.bindString(19, more);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.getString(offset + 3), // user_pass
            cursor.getInt(offset + 4), // user_status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_login
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_email
            cursor.getString(offset + 7), // last_login_ip
            cursor.getInt(offset + 8), // last_login_time
            cursor.getString(offset + 9), // user_activation_key
            cursor.getInt(offset + 10), // create_time
            cursor.getInt(offset + 11), // point
            cursor.getInt(offset + 12), // balance
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_nickname
            cursor.getString(offset + 14), // avatar
            cursor.getInt(offset + 15), // sex
            cursor.getInt(offset + 16), // birthday
            cursor.getLong(offset + 17), // user_level
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // more
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_pass(cursor.getString(offset + 3));
        entity.setUser_status(cursor.getInt(offset + 4));
        entity.setUser_login(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_email(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLast_login_ip(cursor.getString(offset + 7));
        entity.setLast_login_time(cursor.getInt(offset + 8));
        entity.setUser_activation_key(cursor.getString(offset + 9));
        entity.setCreate_time(cursor.getInt(offset + 10));
        entity.setPoint(cursor.getInt(offset + 11));
        entity.setBalance(cursor.getInt(offset + 12));
        entity.setUser_nickname(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAvatar(cursor.getString(offset + 14));
        entity.setSex(cursor.getInt(offset + 15));
        entity.setBirthday(cursor.getInt(offset + 16));
        entity.setUser_level(cursor.getLong(offset + 17));
        entity.setMore(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserLevelDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN USER_LEVEL T0 ON T.\"USER_LEVEL\"=T0.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserLevel userLevelClazz = loadCurrentOther(daoSession.getUserLevelDao(), cursor, offset);
         if(userLevelClazz != null) {
            entity.setUserLevelClazz(userLevelClazz);
        }

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
